{
	"info": {
		"_postman_id": "515a855c-3682-4730-b1ed-6f79ae10eb92",
		"name": "assertion(session_4)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45800899",
		"_collection_link": "https://saharsh-804555.postman.co/workspace/Postman-Api-Testing~f56b14b3-a767-410b-93a5-421a7c66e39e/collection/45800899-515a855c-3682-4730-b1ed-6f79ae10eb92?action=share&source=collection_link&creator=45800899"
	},
	"item": [
		{
			"name": "Whole Script",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"// or\r",
							"pm.test(\"successful get request\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"\r",
							"// failed test case\r",
							"pm.test(\"failed test case\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"// if we have two value to check\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"})\r",
							"\r",
							"// check status code text\r",
							"pm.test(\"status code name has string\", ()=> {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"})\r",
							"\r",
							"//check header is present or not\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"})\r",
							"\r",
							"//check for header having a particular value\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Length is 482\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.eql(\"482\");\r",
							"})\r",
							"\r",
							"//check for cookies but here cookies is not availabl i write syntex only\r",
							"pm.test(\"Cookie is not present\", function () {\r",
							"    pm.expect(pm.cookies.has(\"session\")).to.be.false;\r",
							"})\r",
							"//check for cookies value\r",
							"// pm.test(\"Cookie value is correct\", function () {\r",
							"//     pm.expect(pm.cookies.get(\"session\")).to.eql(\"1234567890\");\r",
							"// })\r",
							"\r",
							"\r",
							"//check for response time\r",
							"pm.test(\"response time is less than 10ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10);\r",
							"})\r",
							"\r",
							"//check for type of response\r",
							"pm.test(\"response is JSON\", function () {\r",
							"    pm.expect(pm.response.to.be.json);\r",
							"})\r",
							"\r",
							"//check for type of response\r",
							"// const response = pm.response.json();\r",
							"// pm.test(\"test type of response\", function () {\r",
							"//     pm.expect(response).to.be.an(\"array\");\r",
							"//     pm.expect(response.name).to.be.a(\"string\");\r",
							"//     pm.expect(response.age).to.be.a(\"number\");\r",
							"//     pm.expect(response.grade).to.be.a(\"string\");\r",
							"//     pm.expect(response.subjects).to.be.an(\"array\");\r",
							"// })\r",
							"\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.test(\"Test type of first item in response array\", function () {\r",
							"    pm.expect(response).to.be.an(\"array\");\r",
							"    const first = response[0]; // access the first object in the array\r",
							"    pm.expect(first.name).to.be.a(\"string\");\r",
							"    pm.expect(first.age).to.be.a(\"number\");\r",
							"    pm.expect(first.grade).to.be.a(\"string\");\r",
							"    pm.expect(first.subjects).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//asserting about values of data\r",
							"pm.test(\"Check if the first student's name is Saharsh JAin\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response[0].name).to.eql(\"Saharsh JAin\");\r",
							"    pm.expect(response[0].subjects[0]).to.eql(\"Math\");\r",
							"})\r",
							"\r",
							"//assertind the array in which they contain particular value of array\r",
							"pm.test(\"test array properties\",() => {\r",
							"    pm.expect(response[0].subjects).to.include(\"Math\");\r",
							"    pm.expect(response[0].subjects).to.have.members([\"Math\",\"Physics\",\"English\"]);\r",
							"\r",
							"})\r",
							"\r",
							"\r",
							"//json schema validation\r",
							"// const jsonData = pm.response.json();\r",
							"// var schema = \r",
							"// {\r",
							"//   \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"//   \"type\": \"object\",\r",
							"//   \"properties\": {\r",
							"//     \"students\": {\r",
							"//       \"type\": \"array\",\r",
							"//       \"items\": [\r",
							"//         {\r",
							"//           \"type\": \"object\",\r",
							"//           \"properties\": {\r",
							"//             \"id\": {\r",
							"//               \"type\": \"string\"\r",
							"//             },\r",
							"//             \"name\": {\r",
							"//               \"type\": \"string\"\r",
							"//             },\r",
							"//             \"age\": {\r",
							"//               \"type\": \"integer\"\r",
							"//             },\r",
							"//             \"grade\": {\r",
							"//               \"type\": \"string\"\r",
							"//             },\r",
							"//             \"subjects\": {\r",
							"//               \"type\": \"array\",\r",
							"//               \"items\": [\r",
							"//                 {\r",
							"//                   \"type\": \"string\"\r",
							"//                 },\r",
							"//                 {\r",
							"//                   \"type\": \"string\"\r",
							"//                 },\r",
							"//                 {\r",
							"//                   \"type\": \"string\"\r",
							"//                 }\r",
							"//               ]\r",
							"//             }\r",
							"//           },\r",
							"//           \"required\": [\r",
							"//             \"id\",\r",
							"//             \"name\",\r",
							"//             \"age\",\r",
							"//             \"grade\",\r",
							"//             \"subjects\"\r",
							"//           ]\r",
							"//         },\r",
							"//         {\r",
							"//           \"type\": \"object\",\r",
							"//           \"properties\": {\r",
							"//             \"id\": {\r",
							"//               \"type\": \"string\"\r",
							"//             },\r",
							"//             \"name\": {\r",
							"//               \"type\": \"string\"\r",
							"//             },\r",
							"//             \"age\": {\r",
							"//               \"type\": \"integer\"\r",
							"//             },\r",
							"//             \"grade\": {\r",
							"//               \"type\": \"string\"\r",
							"//             },\r",
							"//             \"subjects\": {\r",
							"//               \"type\": \"array\",\r",
							"//               \"items\": [\r",
							"//                 {\r",
							"//                   \"type\": \"string\"\r",
							"//                 },\r",
							"//                 {\r",
							"//                   \"type\": \"string\"\r",
							"//                 },\r",
							"//                 {\r",
							"//                   \"type\": \"string\"\r",
							"//                 }\r",
							"//               ]\r",
							"//             }\r",
							"//           },\r",
							"//           \"required\": [\r",
							"//             \"id\",\r",
							"//             \"name\",\r",
							"//             \"age\",\r",
							"//             \"grade\",\r",
							"//             \"subjects\"\r",
							"//           ]\r",
							"//         },\r",
							"//         {\r",
							"//           \"type\": \"object\",\r",
							"//           \"properties\": {\r",
							"//             \"id\": {\r",
							"//               \"type\": \"string\"\r",
							"//             },\r",
							"//             \"name\": {\r",
							"//               \"type\": \"string\"\r",
							"//             },\r",
							"//             \"age\": {\r",
							"//               \"type\": \"integer\"\r",
							"//             },\r",
							"//             \"grade\": {\r",
							"//               \"type\": \"string\"\r",
							"//             },\r",
							"//             \"subjects\": {\r",
							"//               \"type\": \"array\",\r",
							"//               \"items\": [\r",
							"//                 {\r",
							"//                   \"type\": \"string\"\r",
							"//                 },\r",
							"//                 {\r",
							"//                   \"type\": \"string\"\r",
							"//                 },\r",
							"//                 {\r",
							"//                   \"type\": \"string\"\r",
							"//                 }\r",
							"//               ]\r",
							"//             }\r",
							"//           },\r",
							"//           \"required\": [\r",
							"//             \"id\",\r",
							"//             \"name\",\r",
							"//             \"age\",\r",
							"//             \"grade\",\r",
							"//             \"subjects\"\r",
							"//           ]\r",
							"//         }\r",
							"//       ]\r",
							"//     }\r",
							"//   },\r",
							"//   \"required\": [\r",
							"//     \"students\"\r",
							"//   ]\r",
							"// }\r",
							"\r",
							"// pm.test(\"Response body is valid JSON Schema\", function () {\r",
							"//     const jsonData = pm.response.json();\r",
							"//     const tv4 = require('tv4'); // tv4 is a json schema validator\r",
							"//     const schema = require('./schema.json'); // replace with your schema file path\r",
							"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"// })\r",
							"\r",
							"pm.test(\"Validate response schema\", function () {\r",
							"    var schema = {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\"id\", \"name\", \"age\", \"grade\", \"subjects\"],\r",
							"            \"properties\": {\r",
							"                \"id\": { \"type\": \"string\" },\r",
							"                \"name\": { \"type\": \"string\" },\r",
							"                \"age\": { \"type\": \"number\" },\r",
							"                \"grade\": { \"type\": \"string\" },\r",
							"                \"subjects\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": { \"type\": \"string\" }\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(tv4.validate(data, schema), JSON.stringify(tv4.error)).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "get(all student)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//schema script which is different from youtube channel\r",
							"pm.test(\"Response body is valid JSON Schema\", function () {\r",
							"    const jsonData = pm.response.json(); // Define jsonData here\r",
							"    const schema = { // Define schema here\r",
							"        type: \"array\",\r",
							"        items: {\r",
							"            type: \"object\",\r",
							"            properties: {\r",
							"                id: { type: \"string\" },\r",
							"                name: { type: \"string\" },\r",
							"                age: { type: \"integer\" },\r",
							"                grade: { type: \"string\" },\r",
							"                subjects: { type: \"array\", items: { type: \"string\" } }\r",
							"            },\r",
							"            required: [\"id\", \"name\", \"age\", \"grade\", \"subjects\"]\r",
							"        }\r",
							"    };\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		}
	]
}